# Importing custom state behavior modules
from Black_State import *
from Red import *
from Light_Blue_State import *
from Dark_Blue_State import *

# Importing general state class and other required libraries
from State_Class import *
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
import random
import imageio

# Grid dimensions
rows, cols = 100, 100
np.set_printoptions(threshold=np.inf)  # Print full arrays (useful for debugging)

# Initialize simulation grid and other helper data structures
data = [[0 for _ in range(cols)] for _ in range(rows)]
num_data = np.zeros((rows, cols), dtype=int)

# Dictionaries for managing state behaviors and timers
dark_blue_counter = {}
initial_black_counter = {}
initial_lblue_counter = {}
black_lifetime = {}
dblue_lifetime = {}
cooldown_counter = {}
revert_to_state = {}

# Initial condition flags
normal = 0
drug_spread = False
light_blue_count = 0
dark_blue_count = 0
black_count = 0
red_count = 0

# Dynamic border columns for reintroducing light blue
left_most_col = 22
right_most_col = 76

# Time steps and tracking for visual analysis
time = list(range(300))
lblue = []
dblue = []
black = []
red = []

# Add initial red cells randomly within a specified central region
random_columns_red = [random.randint(24,77) for _ in range(3975)]
random_rows_red = [random.randint(1, 99) for _ in range(3975)]
num_data[:, 29] = 2
num_data[:, 30] = 2
num_data[:, 70] = 2
num_data[:, 71] = 2
for i in range(3975):
    num_data[random_rows_red[i]][random_columns_red[i]] = 2

# Add light blue cells in random edge clusters
random_black1 = [random.randint(1,99) for i in range(75)]
random_black2 = [random.randint(1,99) for i in range(75)]
random_rows1 = [random.randint(1, 99) for _ in range(300)]
random_rows2 = [random.randint(1, 99) for _ in range(300)]
random_columns_left = [random.randint(24,28) for _ in range(300)]
random_columns_right = [random.randint(72,76) for _ in range(300)]
for i in range(300):
    num_data[random_rows1[i]][random_columns_left[i]] = 1
    num_data[random_rows2[i]][random_columns_right[i]] = 1

# Uncomment this block to add initial black border cells
# for i in range(75):
#     num_data[random_black1[i]][23] = 2
#     num_data[random_black2[i]][77] = 2

# Create structured vertical and block regions of light blue and red
for i in range(45,56):
    num_data[:, i] = 1
for i in range(47, 54):
    num_data[:, i] = 0
for i in range(53,63):
    for j in range(45,56):
        num_data[i][j] = 1
for i in range(55,61):
    for j in range(45,56):
        num_data[i][j] = 2

# Count initial light blue cells
initial_lblue = 0
for i in range(cols):
    for j in range(rows):
        if num_data[j][i] == 1:
            initial_lblue += 1

# Main simulation loop
for k in range(300):
    if k == 100:
        normal += 1
    if k == 200:
        normal += 1

    # Initialize state objects based on num_data values
    for i in range(len(data)):
        for j in range(len(data[i])):
            if num_data[i][j] == 0:
                data[i][j] = State(i,j,num_data)
            if num_data[i][j] == 1:
                data[i][j] = Light_Blue(i,j,num_data)
                light_blue_count += 1
            if num_data[i][j] == 4:
                data[i][j] = Dark_Blue(i,j,num_data)
                dark_blue_count += 1
            if num_data[i][j] == 2:
                data[i][j] = Red(i,j,num_data)
                red_count += 1
            if num_data[i][j] == 3:
                data[i][j] = Black(i,j,num_data)
                black_count += 1

    # Append counts for plotting later
    lblue.append(light_blue_count)
    dblue.append(dark_blue_count)
    black.append(black_count)
    red.append(red_count)

    # Define color mapping for the visualization
    cmap_to_use = colors.ListedColormap(['white','#ADD8E6', '#FF0000', 'black','#4169e1'])

    # Refresh num_data grid based on updated object states
    for i in range(rows):
        for j in range(cols):
            num_data[i,j] = data[i][j].getstate()

    # Visualization setup
    """
    plt.figure(figsize=(7, 6))
    plt.imshow(num_data, cmap=cmap_to_use , vmin=0, vmax=4)
    plt.grid(which='both', color='k', linewidth=0.5)
    plt.xticks([])
    plt.yticks([])
    """

    # Handle light blue conversion logic every 3 frames
    if(k%3 == 0):
        for i in range(rows):
            for j in range(cols):
                if num_data[i][j] == 1:
                    if 3 in data[i][j].neighborhood:
                        if (i, j) not in dark_blue_counter:
                            dark_blue_counter[(i, j)] = 1
                        else:
                            dark_blue_counter[(i, j)] += 1

                        result = data[i][j].update_light_blue(dark_blue_counter[(i, j)])
                        if result == 0:
                            num_data[i][j] = 1
                        elif result == 1:
                            num_data[i][j] = 4
                            if 1 in data[i][j].neighborhood:
                                neighbors = [(dx, dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if not (dx == 0 and dy == 0)]
                                random.shuffle(neighbors)
                                for dx, dy in neighbors:
                                    ni, nj = i + dx, j + dy
                                    if not (0 <= ni < rows and 0 <= nj < cols):
                                        continue
                                    if num_data[ni][nj] == 3:
                                        num_data[ni][nj] = 0
                                        if (i, j) not in initial_black_counter:
                                            initial_black_counter[(i, j)] = 1
                                        break
                        elif result == 2:
                            num_data[i][j] = 0
                            if (i, j) in dark_blue_counter:
                                del dark_blue_counter[(i, j)]

    # Dark blue spreading and converting red cells logic
    if(k%3 != 0):
        for i in range(rows):
            for j in range(cols):
                if isinstance(data[i][j], Dark_Blue):
                    if data[i][j].update_dark_blue() and (i, j) not in cooldown_counter:
                        neighbors2 = [(dx, dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if not (dx == 0 and dy == 0)]
                        random.shuffle(neighbors2)
                        for dx, dy in neighbors2:
                            ni, nj = i + dx, j + dy
                            if not (0 <= ni < rows and 0 <= nj < cols):
                                continue
                            if num_data[ni][nj] == 2:
                                revert_to_state[(ni, nj)] = 2
                                num_data[ni][nj] = 4
                                if (i, j) in dark_blue_counter:
                                    num_data[i][j] = 1
                                else:
                                    num_data[i][j] = 2
                                break
                            else:
                                continue
                            break
                        cooldown_counter[(i, j)] = 2

    # Introduce new black cells from edges every 10 steps (every 10 steps starting at 2)
    if((k-2)%10 == 0):
        for i in range(rows):
            for j in range(cols):
                if j == 0 or j == cols - 1:
                    num_data[i][j] = 3
                    data[i][j] = Black(i, j, num_data)
                    drug_spread = True

    # Black spread propagation into neighboring white cells
    if(drug_spread == True):
        for i in range(rows):
            for j in range(cols):
                if isinstance(data[i][j], Black):
                    neighbors3 = [(dx, dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if not (dx == 0 and dy == 0)]
                    random.shuffle(neighbors3)
                    for dx, dy in neighbors3:
                        ni, nj = i + dx, j + dy
                        if not (0 <= ni < rows and 0 <= nj < cols):
                            continue
                        if num_data[ni][nj] == 0:
                            num_data[ni][nj] = 3
                            break

    # Stop black cell spread every 13 frames
    if(k%13 == 0):
        drug_spread = False

    # Manage black cell decay (based on "normal" mode)
    for m in range(2):
        for i in range(rows):
            for j in range(cols):
                if num_data[i][j] == 3 and k%2 == 0:
                    if (i, j) not in black_lifetime:
                        if normal == 0:
                            black_lifetime[(i, j)] = 5
                        if normal == 1:
                            black_lifetime[(i, j)] = 10
                        else:
                            black_lifetime[(i, j)] = (k-50)^2
                    else:
                        black_lifetime[(i, j)] -= 1
                        if black_lifetime[(i, j)] <= 0:
                            num_data[i][j] = 0
                            del black_lifetime[(i, j)]

    # Handle cooldown and reverting to original states
    for (i, j) in list(cooldown_counter.keys()):
        cooldown_counter[(i, j)] -= 1
        if cooldown_counter[(i, j)] <= 0:
            del cooldown_counter[(i, j)]
            if (i, j) in revert_to_state:
                num_data[i][j] = revert_to_state[(i, j)]
                del revert_to_state[(i, j)]
            else:
                num_data[i][j] = 1

    # Handle dark blue decay over time
    for i in range(rows):
        for j in range(cols):
            if num_data[i][j] == 4:
                if (i, j) not in dblue_lifetime:
                    dblue_lifetime[(i, j)] = 5
                else:
                    dblue_lifetime[(i, j)] -= 1
                    if dblue_lifetime[(i, j)] <= 0:
                        num_data[i][j] = 1
                        del dblue_lifetime[(i, j)]

    # Reintroduce light blue cells near the boundary if they drop below 80% of initial
    if(light_blue_count <= (.80)*initial_lblue):
        randnum = [random.randint(0, 99) for _ in range(90)]
        for el in randnum:
            if(num_data[el][left_most_col] == 2 or num_data[el][left_most_col] == 4):
                num_data[el][left_most_col] = 1
            if(num_data[el][right_most_col] == 2 or num_data[el][right_most_col] == 4):
                num_data[el][right_most_col] = 1
        left_most_col += 1
        right_most_col -= 1

    # Reactivate previously light blue cells
    if(k%3 == 0):
        for i in range(rows):
            for j in range(cols):
                if num_data[i][j] == 0 and (i,j) in initial_lblue_counter:
                    num_data[i][j] = 1

    # Reset counters for next frame
    initial_lblue = light_blue_count
    light_blue_count = 0
    dark_blue_count = 0
    black_count = 0
    red_count = 0

    # Save frame as image
    """
    plt.savefig('figure_' + str(k) + '.jpg', bbox_inches='tight', pad_inches=0.02)
    """
    plt.close()

# Optional plot block (commented out)

#plt.plot(time[175:],lblue[175:], label="Synaptic Terminals", color="lightblue")
plt.plot(time,black, label="neurotransmitter mimicking drug", color="black")
#plt.plot(time[175:],dblue[175:], label="Neuron Undergoing Action Potential", color="darkblue")
#plt.plot(time[175:],red[175:], label="Temporary Action Potential Acceptor", color="red")
plt.xlabel("Time(days)")
plt.ylabel("Number of States")
plt.legend()
plt.show()
"""

# Compile all saved frames into a gif
images = []
for fileNumber in range(0, k):
    filename = 'figure_' + str(fileNumber) + '.jpg'
    images.append(imageio.v2.imread(filename))
imageio.mimsave('movie2.gif', images, fps=2)
print('GIF saved')
"""
